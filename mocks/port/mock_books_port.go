// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/port/books_port.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/port/mock_books_port.go -package=mocks -source=usecase/port/books_port.go BooksInputPort BooksOutputPort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dto "xyz-books/usecase/dto"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockBooksInputPort is a mock of BooksInputPort interface.
type MockBooksInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockBooksInputPortMockRecorder
}

// MockBooksInputPortMockRecorder is the mock recorder for MockBooksInputPort.
type MockBooksInputPortMockRecorder struct {
	mock *MockBooksInputPort
}

// NewMockBooksInputPort creates a new mock instance.
func NewMockBooksInputPort(ctrl *gomock.Controller) *MockBooksInputPort {
	mock := &MockBooksInputPort{ctrl: ctrl}
	mock.recorder = &MockBooksInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksInputPort) EXPECT() *MockBooksInputPortMockRecorder {
	return m.recorder
}

// EditBook mocks base method.
func (m *MockBooksInputPort) EditBook(arg0 *gin.Context, arg1 *dto.EditBookInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditBook indicates an expected call of EditBook.
func (mr *MockBooksInputPortMockRecorder) EditBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBook", reflect.TypeOf((*MockBooksInputPort)(nil).EditBook), arg0, arg1)
}

// GetBook mocks base method.
func (m *MockBooksInputPort) GetBook(arg0 *gin.Context, arg1 *dto.GetBookInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBooksInputPortMockRecorder) GetBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBooksInputPort)(nil).GetBook), arg0, arg1)
}

// ListBooks mocks base method.
func (m *MockBooksInputPort) ListBooks(arg0 *gin.Context, arg1 *dto.ListBookInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBooksInputPortMockRecorder) ListBooks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBooksInputPort)(nil).ListBooks), arg0, arg1)
}

// MockBooksOutputPort is a mock of BooksOutputPort interface.
type MockBooksOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockBooksOutputPortMockRecorder
}

// MockBooksOutputPortMockRecorder is the mock recorder for MockBooksOutputPort.
type MockBooksOutputPortMockRecorder struct {
	mock *MockBooksOutputPort
}

// NewMockBooksOutputPort creates a new mock instance.
func NewMockBooksOutputPort(ctrl *gomock.Controller) *MockBooksOutputPort {
	mock := &MockBooksOutputPort{ctrl: ctrl}
	mock.recorder = &MockBooksOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksOutputPort) EXPECT() *MockBooksOutputPortMockRecorder {
	return m.recorder
}

// EditBook mocks base method.
func (m *MockBooksOutputPort) EditBook(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EditBook", arg0)
}

// EditBook indicates an expected call of EditBook.
func (mr *MockBooksOutputPortMockRecorder) EditBook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBook", reflect.TypeOf((*MockBooksOutputPort)(nil).EditBook), arg0)
}

// GetBook mocks base method.
func (m *MockBooksOutputPort) GetBook(arg0 *gin.Context, arg1 *dto.GetBookOutput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBook", arg0, arg1)
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBooksOutputPortMockRecorder) GetBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBooksOutputPort)(nil).GetBook), arg0, arg1)
}

// ListBooks mocks base method.
func (m *MockBooksOutputPort) ListBooks(arg0 *gin.Context, arg1 *dto.ListBooksOuput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListBooks", arg0, arg1)
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBooksOutputPortMockRecorder) ListBooks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBooksOutputPort)(nil).ListBooks), arg0, arg1)
}
