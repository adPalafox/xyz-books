// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/post_process.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository/mock_post_process.go -package=mocks -source=usecase/repository/post_process.go PostProcessRepositoryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockPostProcessRepositoryInterface is a mock of PostProcessRepositoryInterface interface.
type MockPostProcessRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostProcessRepositoryInterfaceMockRecorder
}

// MockPostProcessRepositoryInterfaceMockRecorder is the mock recorder for MockPostProcessRepositoryInterface.
type MockPostProcessRepositoryInterfaceMockRecorder struct {
	mock *MockPostProcessRepositoryInterface
}

// NewMockPostProcessRepositoryInterface creates a new mock instance.
func NewMockPostProcessRepositoryInterface(ctrl *gomock.Controller) *MockPostProcessRepositoryInterface {
	mock := &MockPostProcessRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPostProcessRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostProcessRepositoryInterface) EXPECT() *MockPostProcessRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockPostProcessRepositoryInterface) Finish(arg0 *gin.Context, arg1 *error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish", arg0, arg1)
}

// Finish indicates an expected call of Finish.
func (mr *MockPostProcessRepositoryInterfaceMockRecorder) Finish(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockPostProcessRepositoryInterface)(nil).Finish), arg0, arg1)
}
