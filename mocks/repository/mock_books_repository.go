// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/books_repository.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository/mock_books_repository.go -package=mocks -source=usecase/repository/books_repository.go BooksRepositoryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entity "xyz-books/entity"
	dto "xyz-books/usecase/dto"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockBooksRepositoryInterface is a mock of BooksRepositoryInterface interface.
type MockBooksRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBooksRepositoryInterfaceMockRecorder
}

// MockBooksRepositoryInterfaceMockRecorder is the mock recorder for MockBooksRepositoryInterface.
type MockBooksRepositoryInterfaceMockRecorder struct {
	mock *MockBooksRepositoryInterface
}

// NewMockBooksRepositoryInterface creates a new mock instance.
func NewMockBooksRepositoryInterface(ctrl *gomock.Controller) *MockBooksRepositoryInterface {
	mock := &MockBooksRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockBooksRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksRepositoryInterface) EXPECT() *MockBooksRepositoryInterfaceMockRecorder {
	return m.recorder
}

// EditBook mocks base method.
func (m *MockBooksRepositoryInterface) EditBook(arg0 *gin.Context, arg1 *dto.EditBookInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditBook indicates an expected call of EditBook.
func (mr *MockBooksRepositoryInterfaceMockRecorder) EditBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBook", reflect.TypeOf((*MockBooksRepositoryInterface)(nil).EditBook), arg0, arg1)
}

// GetBookByISBN mocks base method.
func (m *MockBooksRepositoryInterface) GetBookByISBN(arg0 *gin.Context, arg1 string) (*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByISBN", arg0, arg1)
	ret0, _ := ret[0].(*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByISBN indicates an expected call of GetBookByISBN.
func (mr *MockBooksRepositoryInterfaceMockRecorder) GetBookByISBN(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByISBN", reflect.TypeOf((*MockBooksRepositoryInterface)(nil).GetBookByISBN), arg0, arg1)
}

// ListBooks mocks base method.
func (m *MockBooksRepositoryInterface) ListBooks(arg0 *gin.Context, arg1, arg2 int, arg3, arg4 string) (*[]entity.Book, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*[]entity.Book)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBooksRepositoryInterfaceMockRecorder) ListBooks(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBooksRepositoryInterface)(nil).ListBooks), arg0, arg1, arg2, arg3, arg4)
}
